/*Question:
 *Write an algorithm such that if an element in an M*N matrix is
 *0, its entire row and column is set to 0
 *
 *Tricky: there is no need to initiate two matrix, just track
 *rows and columns which contain 0 and set 0. Tracverse the
 *matrix twice.
 *Author: Yuchao Zhou
 */
#include <algorithm>
#include <stdlib.h>
#include <string>
#include <iostream>
#include <vector>

using namespace std;

void transfer(int matrix[][3])
{
	vector<int> row;
	vector<int> column;
	for (int i = 0; i < 4; i++)
    {
    	for (int j = 0; j < 3; j++)
    	{
    		if (matrix[i][j] == 0)
    		{
    			row.push_back(i);
    			column.push_back(j);
    		}
    	}
    }
    for (int i = 0; i < row.size(); i++)
    {
    	int rowNeedsChange = row[i];
    	for(int j = 0; j < 3; j++)
    	{
    		matrix[rowNeedsChange][j] = 0;
    	}
    }
    for (int i = 0; i < column.size(); i++)
    {
    	int columnNeedsChange = column[i];
    	for(int j = 0; j < 4; j++)
    	{
    		matrix[j][columnNeedsChange] = 0;
    	}
    }
	
	cout<<"After transfer: "<<endl;
	for (int i = 0; i < 4; i++)
    {
    	for (int j = 0; j < 3; j++)
    	{
    		cout<<matrix[i][j]<<"  ";
    	}
    	cout<<endl;
    }
    cout<<endl;
}

int main(int argc, char* argv[])
{
	int a[4][3] = {
        {0, 2, 3},
        {4, 0, 6},
        {7, 8, 9},
        {10, 11, 12}
    };
    
    for (int i = 0; i < 4; i++)
    {
    	for (int j = 0; j < 3; j++)
    	{
    		cout<<a[i][j]<<"  ";
    	}
    	cout<<endl;
    }
    cout<<endl;
    
    transfer(a);
	return 0;
}

