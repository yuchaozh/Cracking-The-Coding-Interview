2.1:Write code to remove deplicates from an unsorted linked list. FOLLOW UP How would you solve this problem if a temporary buffer is not allowed?

2.2:Implement an algorithm to find the nth to last element of a singly linked list.

2.3:Implement an algorithm to delete a node in the middle of a single linked list, given only access to that node. EXAMPLE Innput:the node 'c' from the linked list a->b->c->d->e Result:nothing is returned, but the new linked list like a->b->d->e

2.4:You have two numbers represented by a linked list, where node contains a single digit. The digits are sorted in reverse order, such that the 1's digit is at the head of the list. Write a function that adds the two numbers and returns the sum as a linked list. EXAMPLE Input:(3->1->5) + (5->9->2) Output:8->0->8

2.5:Given a circular linked list, implement an algorithm which  returns node at the beginning of the loop. Circular linked list: A (corrupt) linked list in which a node's next pointer points to an earlier node, so as to make a loop in the linked list. EXAMPLE Input:A->B->C->D->E->F->C (the same C as earlier) Output:C

